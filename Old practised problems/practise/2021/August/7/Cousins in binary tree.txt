/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        queue<TreeNode*> q;
        
        q.push(root);
        
        vector<int>t;
        vector<TreeNode*>tmp;
        while(!q.empty()){
            t.clear();
            tmp.clear();
            
            while(!q.empty()){
                TreeNode* nod = q.front();
                int a=0;
                if(nod->left){
                    tmp.push_back(nod->left);
                    a += 101*nod->left->val;
                }
                if(nod->right){
                    tmp.push_back(nod->right);
                    a += nod->right->val;
                }
                q.pop();
                t.push_back(a);
            }
            
        for(int i=0;i<t.size()-1;i++)
            for(int j=i+1;j<t.size();j++){
            if((t[i]%101 == x || t[i]/101 == x) && (t[j]%101 == y || t[j]/101 == y))
                return true;
            if((t[i]%101 == y || t[i]/101 == y) && (t[j]%101 == x || t[j]/101 == x))                 return true;
        }
            
        for(auto val: tmp)
            q.push(val);
            
        }
        
        return false;
    }
};