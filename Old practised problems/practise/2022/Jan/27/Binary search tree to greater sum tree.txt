/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int tot(TreeNode* root){
        if(root == NULL)
            return 0;
        
        int val = root->val;
        
        val += tot(root->left);
        val += tot(root->right);
        
        return val;
    }
    
    TreeNode* leftAlgo(TreeNode* root, int val){
        if(root == NULL)
            return NULL;
        
        root->val += val+tot(root->right);
        
        root->left = leftAlgo(root->left, root->val);
        root->right = leftAlgo(root->right, val);
        
        return root;
    }
    
    TreeNode* bstToGst(TreeNode* root) {
        if(root == NULL)
            return root;
        
        int val = tot(root->right);
        root->val += val;
        val = root->val;
        
        root->left = leftAlgo(root->left, val);
        root->right = leftAlgo(root->right, 0);
        
        return root;
    }
};


_______________________________________
Best recursive approach (Lee)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int pre = 0;
    TreeNode* bstToGst(TreeNode* root) {
        if(root->right)
            root->right = bstToGst(root->right);
        pre = pre + root->val;
        root->val = pre;
        
        if(root->left)
            root->left = bstToGst(root->left);
        
        return root;
    } 
};