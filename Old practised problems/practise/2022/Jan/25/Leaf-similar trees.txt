/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>leaf1;
    vector<int>leaf2;
    
    void traverse1(TreeNode* root){
        if(root == NULL)
            return;
        
        if(root->left == NULL && root->right == NULL){
            leaf1.push_back(root->val);
            return;
        }
        
        traverse1(root->left);
        traverse1(root->right);
    }
    
    void traverse2(TreeNode* root){
        if(root == NULL)
            return;
        
        if(root->left == NULL && root->right == NULL){
            leaf2.push_back(root->val);
            return;
        }
        
        traverse2(root->left);
        traverse2(root->right);
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        traverse1(root1);
        traverse2(root2);
        
        int n1 = leaf1.size();
        int n2 = leaf2.size();
        
        if(n1 == n2){
            int n = n1;
            
            for(int i=0; i<n; i++){
                if(leaf1[i] != leaf2[i])
                    return false;
            }
            
            return true;
        }
        return false;
    }
};