/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isPalin(vector<int>all){
        int n = all.size();
        
        if(n%2 == 0){
            for(int i=0; i<n/2; i++){
                if(all[i] == all[n-1-i])
                    ;
                else
                    return false;
            }
            return true;
        }
        
        return false;
    }
    
    bool isSymmetric(TreeNode* root) {
        vector<TreeNode*>curr;
        vector<TreeNode*>tmp;
        
        curr.push_back(root);
        
        while(true){
            if(curr.empty())
                break;
            vector<int> here;
            
            for(TreeNode* t : curr){
                if(t->left != NULL){
                    tmp.push_back(t->left);
                    here.push_back(t->left->val);
                }else
                    here.push_back(1001);
                
                if(t->right != NULL){
                    tmp.push_back(t->right);
                    here.push_back(t->right->val);
                }else
                    here.push_back(1001);
            }
            
            if(isPalin(here) == false)
                return false;
            
            curr = tmp;
            tmp.clear();
            here.clear();
        }
        
        return true;
    }
};