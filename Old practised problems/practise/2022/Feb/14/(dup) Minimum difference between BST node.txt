/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int greatest(TreeNode* root){
        if(!root)
            return -1;
        
        int res = root->val;
        
        int l = greatest(root->left);
        if(l > res)
            res = l;
        
        int r = greatest(root->right);
        if(r > res)
            res = r;
        
        return res;
    }
    
    int lowest(TreeNode* root){
        if(!root)
            return INT_MAX;
        
        int res = root->val;
        
        int l = lowest(root->left);
        if(l < res)
            res = l;
        
        int r = lowest(root->right);
        if(r < res)
            res = r;
        
        return res;
    }
    
    int getMinimumDifference(TreeNode* root) {
        int res = INT_MAX;
        if(!root)
            return res;
        
        if(root->left){
            int diff = abs(root->val - greatest(root->left));
            if(res > diff)
                res = diff;
        }
        
        if(root->right){
            int diff = abs(root->val - lowest(root->right));
            if(res > diff)
                res = diff;
        }
        
        
        int l = getMinimumDifference(root->left);
        
        int r = getMinimumDifference(root->right);
        
        if(res > min(l, r))
            res = min(l, r);
        
        return res;
    }
};