class Solution {
public:
    void dfs(vector<vector<int>>& isConnected, set<int>&visited, int node){
        vector<int>toTraverse = adjNodes(isConnected, node);
        int tn = toTraverse.size();
        
        visited.insert(node);
        
        for(int i=0; i<tn; i++){
            int currNode = toTraverse[i];
            if(visited.count(currNode) == 0)
                dfs(isConnected, visited, currNode);    
        }    
    }
    
    vector<int> adjNodes(vector<vector<int>>& isConnected, int node){
        vector<int>res;
        
        int n = isConnected.size();
        for(int j=0; j<n; j++){
            if(isConnected[node][j] == 1 && node != j)
                res.push_back(j);
        }
        
        return res;
    }
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        set<int>visited;
        int n = isConnected.size();
        int res = 0;
        
        for(int i=0; i<n; i++){
            if(visited.count(i) == 0){
                res++;
                dfs(isConnected, visited, i);
            }
        }
        
        return res;
    }
};