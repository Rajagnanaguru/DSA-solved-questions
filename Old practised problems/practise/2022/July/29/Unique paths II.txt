class Solution {
public:
    
    vector<vector<int>>memo;
    int func(int i, int j, vector<vector<int>>& obstacleGrid){
        if(i >= 0 && j >=0 && obstacleGrid[i][j] == 1)
            return 0;
        
        if(i < 0 || j < 0)
            return 0;
        
        if(memo[i][j] != -1)
            return memo[i][j];
        
        if(i == 0 && j == 0)
            return memo[i][j]=1;
        
        int up = func(i-1, j, obstacleGrid);
        int left = func(i, j-1, obstacleGrid);
        
        return memo[i][j]=up+left;
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r = obstacleGrid.size();
        int c = obstacleGrid[0].size();
        
        memo = vector<vector<int>>(r, vector<int>(c, -1));
        
        return func(r-1, c-1, obstacleGrid);
    }
};






// T -> O(m*n)
// T -> O(1) -> Space optimized

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r = obstacleGrid.size();
        int c = obstacleGrid[0].size();
    
        vector<int>prev(c, 0);
        for(int i=0; i<r; i++){
            vector<int>curr(c, 0);
            for(int j=0; j<c; j++){
                if(obstacleGrid[i][j] == 1)
                    curr[j] = 0;
                else if(i == 0 && j == 0)
                    curr[j] = 1;
                else{
                    int up = 0;
                    int left = 0;

                    if(i-1 >= 0)
                        up = prev[j];
                    if(j-1 >= 0)
                        left = curr[j-1];

                    curr[j] = up+left;
                }
            }
            
            prev = curr;
        }
        
        return prev[c-1];
    }
};