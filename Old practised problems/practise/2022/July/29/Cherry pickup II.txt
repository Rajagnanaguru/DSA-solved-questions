class Solution {
public:
    int r, c;
    vector<vector<vector<int>>>memo;
    
    int func(int i, int j1, int j2, vector<vector<int>>& grid){
        if(j1 < 0 || j1 >= c || j2 < 0 || j2 >=  c)
            return INT_MIN;
        
        if(memo[i][j1][j2] != -1)
            return memo[i][j1][j2];
        
        if(i == r-1){
            if(j1 == j2)
                return memo[i][j1][j2] = grid[i][j1];
            else
                return memo[i][j1][j2] = grid[i][j1] + grid[i][j2];
        }
        
        int maxi = INT_MIN;
        
        for(int x=-1; x<2; x++){
            for(int y=-1; y<2; y++){
                int curr = func(i+1, j1+x, j2+y, grid);
                maxi = max(maxi, curr);
            }
        }
        
        if(j1 == j2)
            return memo[i][j1][j2] = maxi + grid[i][j1];
        else
            return memo[i][j1][j2] =  maxi + grid[i][j1] + grid[i][j2];
        
    }
    
    int cherryPickup(vector<vector<int>>& grid) {
        r = grid.size();
        c = grid[0].size();
        
        memo = vector<vector<vector<int>>>(r, vector<vector<int>>(c, vector<int>(c, -1)));
        
        return func(0, 0, c-1, grid);
    }
};




// Space optimization

class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        
        vector<vector<int>>prev(c, vector<int>(c, 0));
        vector<vector<int>>curr(c, vector<int>(c, 0));
        
        for(int j1=0; j1<c; j1++)
            for(int j2=0; j2<c; j2++){
                if(j1 == j2)
                    prev[j1][j2] = grid[r-1][j1];
                else
                    prev[j1][j2] = grid[r-1][j1] + grid[r-1][j2];
            }
        
        for(int i=r-2; i>=0; i--){
            
            for(int j1=0; j1<c; j1++){
                for(int j2=0; j2<c; j2++){
                    
                    int maxi = INT_MIN;
                    for(int x=-1; x<2; x++){
                        for(int y=-1; y<2; y++){
                            int newj1 = j1+x;
                            int newj2 = j2+y;
                            
                            if(newj1 < 0 || newj1 >= c || newj2 < 0 || newj2 >= c)
                                continue;
                            
                            maxi = max(maxi, prev[newj1][newj2]);
                        }
                    }
                    
                    if(j1 == j2)
                        curr[j1][j2] = maxi + grid[i][j1];
                    else
                        curr[j1][j2] = maxi + grid[i][j1] + grid[i][j2];
                }
            }
            
            prev = curr;
        }
        
        return prev[0][c-1];
    }
};