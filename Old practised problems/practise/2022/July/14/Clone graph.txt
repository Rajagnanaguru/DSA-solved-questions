/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    vector<Node*>visited;
    
    void dfs(Node* copy, Node* node){
        int index = node->val;
        
        vector<Node*>toTraverse = node->neighbors;
        
        for(Node* nextNode: toTraverse){
            int nextVal = nextNode->val;
            
            Node* tmp;
            if(visited[nextVal] == NULL){
                tmp = new Node(nextVal);
                copy->neighbors.push_back(tmp);
                visited[nextVal] = tmp;
                
                dfs(tmp, nextNode);
            }else{
                tmp = visited[nextVal];
                copy->neighbors.push_back(tmp);
            }
        }
        
    }
    
    Node* cloneGraph(Node* node) {
        visited = vector<Node*>(101, NULL);
        
        if(node == NULL)
            return NULL;
        
        Node* res = new Node(node->val);
        visited[node->val] = res;
        
        dfs(res, node);
        
        return res;
    }
};