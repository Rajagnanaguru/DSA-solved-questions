class Solution {
public:
    int n;
    
    vector<vector<int>>memo;
    
    bool isThere(int i, int target, vector<int>&arr){
        if(target == 0)
            return true;
        
        if(memo[i][target] != -1)
            return memo[i][target];
        
        if(i == 0)
            return memo[i][target] = (arr[0] == target);
        
        bool nottake = isThere(i-1, target, arr);
        bool take = false;
        
        int residue = target - arr[i];
        if(residue >= 0)
            take = isThere(i-1, residue, arr);
        
        return memo[i][target] = (nottake | take);
    }
    
    bool canPartition(vector<int>& nums) {
        int totalSum = 0;
        
        n = nums.size();
    
        for(auto &val: nums)
            totalSum += val;
        
        if(totalSum%2 != 0)
            return false;
        
        int target = totalSum/2;
        
        memo = vector<vector<int>>(n+1, vector<int>(target+1, -1));
        
        return isThere(n-1, target, nums);
    }
};




// Tabulation

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int totalSum = 0;
        
        int n = nums.size();
    
        for(auto &val: nums)
            totalSum += val;
        
        if(totalSum%2 != 0)
            return false;
        
        int target = totalSum/2;
        
        vector<vector<bool>>dp(n+1, vector<bool>(target+1, false));
    
        for(int i=0; i<n; i++)
            dp[i][0] = true;
        
        if(nums[0] <= target)
            dp[0][nums[0]] = true;
        
        for(int i=1; i<n; i++){
            for(int j=1; j<=target; j++){
                bool nottake = dp[i-1][j];
                bool take = false;

                int residue = j - nums[i];
                if(residue >= 0)
                    take = dp[i-1][residue];

                dp[i][j] = (nottake | take);
            }
        }
        
        return dp[n-1][target];
    }
};




// Space optimization

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int totalSum = 0;
        
        int n = nums.size();
    
        for(auto &val: nums)
            totalSum += val;
        
        if(totalSum%2 != 0)
            return false;
        
        int target = totalSum/2;
        
        vector<vector<bool>>dp(n+1, vector<bool>(target+1, false));
    
        vector<bool>prev(target+1, false);
        vector<bool>curr(target+1, false);
        
        prev[0] = true;
        curr[0] = true;
        
        if(nums[0] <= target)
            prev[nums[0]] = true;
        
        for(int i=1; i<n; i++){
            for(int j=1; j<=target; j++){
                bool nottake = prev[j];
                bool take = false;

                int residue = j - nums[i];
                if(residue >= 0)
                    take = prev[residue];

                curr[j] = (nottake | take);
            }
            
            prev = curr;
        }
        
        return prev[target];
    }
};