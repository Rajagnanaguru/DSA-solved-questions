class Solution {
public:
    int find_parent(vector<int>parent, int index){
        int par = parent[index];
        
        while(par != parent[par])
            par = parent[par];
        
        return par;
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        
        vector<int>parent(n+1);
        vector<int>rank(n+1);
        
        for(int i=1; i<=n; i++){
            parent[i] = i;
            rank[i] = 1;
        }
        
        for(int i=0; i<n; i++){
            vector<int> edge = edges[i];
            int index1 = edge[0];
            int index2 = edge[1];
            
            int parent1 = find_parent(parent, index1);
            int parent2 = find_parent(parent, index2);
            
            if(parent1 == parent2)
                return edge;
            
            int firstRank = rank[parent1];
            int secondRank = rank[parent2];
            
            if(firstRank >= secondRank){
                parent[parent2] = parent1;
                rank[parent1] += rank[parent2]; 
            }else{
                parent[parent1] = parent2;
                rank[parent2] += rank[parent1];
            }
        }
        
        return {};
    }
};