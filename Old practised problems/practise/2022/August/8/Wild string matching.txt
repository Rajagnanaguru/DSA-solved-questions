class Solution {
public:
    vector<vector<int>>memo;
    
    int func(int ind1, int ind2, string &s, string &p){
        
        if(ind2 < 0){
            if(ind1 < 0)
                return 1;
            return 0;
        }
        
        
        if(ind1 < 0){
            int j = ind2;
            while(j >= 0){
                if(p[j--] != '*')
                    return 0;
            }
            
            return 1;
        }
        
        if(memo[ind1][ind2] != -1)
            return memo[ind1][ind2];
      
        if(s[ind1] == p[ind2] || p[ind2] == '?')
            return memo[ind1][ind2] = func(ind1-1, ind2-1, s, p);
        
        if(p[ind2] == '*'){
            int nottake = func(ind1, ind2-1, s, p);
            int take = func(ind1-1, ind2, s, p);
            
            return memo[ind1][ind2] = nottake | take;
        }
        
        return memo[ind1][ind2] = 0;
    }
    
    bool isMatch(string s, string p) {
        int n1 = s.length();
        int n2 = p.length();
        
        memo = vector<vector<int>>(n1+1, vector<int>(n2+1, -1));
        return func(n1-1, n2-1, s, p);
    }
};



// Tabulation

class Solution {
public:
    bool isMatch(string s, string p) {
        int n1 = s.length();
        int n2 = p.length();
        
        vector<vector<int>>dp(n1+1, vector<int>(n2+1, -1));
        
        for(int j=0; j<=n2; j++){
            int t = j;
            
            while(t >= 1){
                if(p[t-1] != '*'){
                    dp[0][j] = 0;
                    break;
                }
                t--;
            }
            
            if(dp[0][j] == -1)
                dp[0][j] = 1;
        }
        
        for(int i=0; i<=n1; i++){
            if(i == 0)
                dp[i][0] = 1;
            else
                dp[i][0] = 0;
        }
        
        
        for(int i=1; i<=n1; i++){
            for(int j=1; j<=n2; j++){
                
                if(s[i-1] == p[j-1] || p[j-1] == '?'){
                    dp[i][j] = dp[i-1][j-1];
                }else if(p[j-1] == '*'){
                    int nottake = dp[i][j-1];
                    int take = dp[i-1][j];

                    dp[i][j] = nottake | take;
                }else
                    dp[i][j] = 0;
                
            }
        }
        
        return dp[n1][n2];
    }
};




// Space optimization

class Solution {
public:
    bool isMatch(string s, string p) {
        int n1 = s.length();
        int n2 = p.length();
        
        vector<int>prev(n2+1, -1);
        vector<int>curr(n2+1, -1);
        
        for(int j=0; j<=n2; j++){
            int t = j;
            
            while(t >= 1){
                if(p[t-1] != '*'){
                    prev[j] = 0;
                    break;
                }
                t--;
            }
            
            if(prev[j] == -1)
                prev[j] = 1;
        }
        
        prev[0] = 1;
        
        for(int i=1; i<=n1; i++){
            curr[0] = 0;
            
            for(int j=1; j<=n2; j++){
                
                if(s[i-1] == p[j-1] || p[j-1] == '?'){
                    curr[j] = prev[j-1];
                }else if(p[j-1] == '*'){
                    int nottake = curr[j-1];
                    int take = prev[j];

                    curr[j] = nottake | take;
                }else
                    curr[j] = 0;
                
            }
            prev = curr;
        }
        
        return prev[n2];
    }
};