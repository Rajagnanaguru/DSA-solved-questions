class Solution {
public:
    
    vector<vector<int>>memo;
    
    int func(int ind1, int ind2, string &word1, string &word2){
        if(ind2 < 0)
            return ind1 + 1;
        
        if(ind1 < 0)
            return ind2 + 1;
        
        if(memo[ind1][ind2] != -1)
            return memo[ind1][ind2];
        
        int notchange = 1e9;
        int insert = 1e9;
        int del = 1e9;
        int replace = 1e9;
        
        if(word1[ind1] == word2[ind2])
            notchange = func(ind1-1, ind2-1, word1, word2);
        else{
            insert = 1 + func(ind1, ind2-1, word1, word2);
            
            del = 1 + func(ind1-1, ind2, word1, word2);
            
            replace = 1 + func(ind1-1, ind2-1, word1, word2);
        }
        
        return memo[ind1][ind2] = min(notchange, min(insert, min(del, replace)));
    }
    
    int minDistance(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        
        memo = vector<vector<int>>(n1+1, vector<int>(n2+1, -1));
        
        return func(n1-1, n2-1, word1, word2);
    }
};


// Tabulation

class Solution {
public:    
    vector<vector<int>>memo;
    
    int func(int ind1, int ind2, string &word1, string &word2){
        if(ind2 == 0)
            return ind1;
        
        if(ind1 == 0)
            return ind2;
        
        if(memo[ind1][ind2] != -1)
            return memo[ind1][ind2];
        
        int notchange = 1e9;
        int insert = 1e9;
        int del = 1e9;
        int replace = 1e9;
        
        if(word1[ind1-1] == word2[ind2-1])
            notchange = func(ind1-1, ind2-1, word1, word2);
        else{
            insert = 1 + func(ind1, ind2-1, word1, word2);
            
            del = 1 + func(ind1-1, ind2, word1, word2);
            
            replace = 1 + func(ind1-1, ind2-1, word1, word2);
        }
        
        return memo[ind1][ind2] = min(notchange, min(insert, min(del, replace)));
    }
    
    int minDistance(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        
        vector<vector<int>>dp(n1+1, vector<int>(n2+1, 0));
        
        for(int j=0; j<=n2; j++)
            dp[0][j] = j;
        
        for(int i=0; i<=n1; i++)
            dp[i][0] = i;
        
        for(int i=1; i<=n1; i++){
            for(int j=1; j<=n2; j++){
                int notchange = 1e9;
                int insert = 1e9;
                int del = 1e9;
                int replace = 1e9;

                if(word1[i-1] == word2[j-1])
                    notchange = dp[i-1][j-1];
                else{
                    insert = 1 + dp[i][j-1];

                    del = 1 + dp[i-1][j];

                    replace = 1 + dp[i-1][j-1];
                }

                dp[i][j] = min(notchange, min(insert, min(del, replace)));
            }
        }
        
        return dp[n1][n2];
    }
};


// Space optimization

class Solution {
public:    
    int minDistance(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        
        vector<int>prev(n2+1, 0);
        vector<int>curr(n2+1, 0);
        
        for(int j=0; j<=n2; j++)
            prev[j] = j;
        
        for(int i=1; i<=n1; i++){
            curr[0] = i;
            for(int j=1; j<=n2; j++){
                int notchange = 1e9;
                int insert = 1e9;
                int del = 1e9;
                int replace = 1e9;

                if(word1[i-1] == word2[j-1])
                    notchange = prev[j-1];
                else{
                    insert = 1 + curr[j-1];

                    del = 1 + prev[j];

                    replace = 1 + prev[j-1];
                }

                curr[j] = min(notchange, min(insert, min(del, replace)));
            }
            prev = curr;
        }
        
        return prev[n2];
    }
};
