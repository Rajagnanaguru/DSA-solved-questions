// Merge Sort -> O(nlogn)

class Solution {
public:
    void merge(vector<int>&nums, int l, int mid, int r){
        int i = l;
        int j = mid+1;

        
        int size = (r-l+1);
        int k = 0;
        
        vector<int>res(size, 0);
        
        while(i <= mid && j <= r){
            if(nums[i] < nums[j]){
                res[k] = nums[i];
                i++;
            }else{
                res[k] = nums[j];
                j++;
            }
            k++;
        }
        
        while(i <= mid){
            res[k] = nums[i];
            i++;
            k++;
        }
        
        while(j <= r){
            res[k] = nums[j];
            j++;
            k++;
        }
        
        for(int k=0; k<size; k++)
            nums[l+k] = res[k];
    }
    
    void mergeSort(int l, int r, vector<int>&nums){
        if(l < r){
            int mid = (l+r)/2;
            
            mergeSort(l, mid, nums);
            mergeSort(mid+1, r, nums);
            
            merge(nums, l, mid, r);
        }
    }
        
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size();
        
        mergeSort(0, n-1, nums);
        
        return nums;
    }
};



