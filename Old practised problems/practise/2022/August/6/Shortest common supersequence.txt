class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int n1 = str1.size();
        int n2 = str2.size();
        
        vector<int>taken1(n1, 0);
        vector<int>taken2(n2, 0);
        
        // Creating the tabulation
        vector<vector<int>>dp(n1+1, vector<int>(n2+1, 0));
        
        for(int i=1; i<= n1; i++){
            for(int j=1; j<=n2; j++){
                if(str1[i-1] == str2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
            }
        }
        
        
        // Traversing the tabulation
        int i = n1, j = n2;
        
        while(i > 0 && j > 0){
            if(str1[i-1] == str2[j-1]){
                taken1[i-1] = 1;
                taken2[j-1] = 1;
                i--;
                j--;
            }else{
                if(dp[i-1][j] > dp[i][j-1])
                    i--;
                else
                    j--;
            }
        }
        
        string res = "";
        
        i = 0, j = 0;
        while(i < n1 || j < n2){
            while(i < n1 && taken1[i] != 1)
                res += str1[i++];
            while(j < n2 && taken2[j] != 1)
                res += str2[j++];
            
            if(i < n1)
                res += str1[i];
            
            i++; 
            j++;
        }
        
        return res;
    }
};







// Shorter version
class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int n1 = str1.size();
        int n2 = str2.size();
        
        vector<int>taken1(n1, 0);
        vector<int>taken2(n2, 0);
        
        // Creating the tabulation
        vector<vector<int>>dp(n1+1, vector<int>(n2+1, 0));
        
        for(int i=1; i<= n1; i++){
            for(int j=1; j<=n2; j++){
                if(str1[i-1] == str2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
            }
        }
        
        
        // Traversing the tabulation
        int i = n1, j = n2;
        string res = "";
        
        while(i > 0 && j > 0){
            if(str1[i-1] == str2[j-1]){
                res += str1[i-1];
                i--;
                j--;
            }else{
                if(dp[i-1][j] > dp[i][j-1]){
                    res += str1[i-1];
                    i--;
                }else{
                    res += str2[j-1];
                    j--;
                }
            }
        }
        
        while(i > 0){
            res += str1[i-1];
            i--;
        }
        
        while(j > 0){
            res += str2[j-1];
            j--;
        }
        
        reverse(res.begin(), res.end());
        return res;
    }
};