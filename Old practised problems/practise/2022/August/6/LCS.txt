class Solution {
public:
    
    vector<vector<int>>memo;
    
    int func(int ind1, int ind2, string &s1, string &s2){
        if(ind1 < 0 || ind2 < 0)
            return 0;
        
        if(memo[ind1][ind2] != -1)
            return memo[ind1][ind2];
        
        if(s1[ind1] == s2[ind2])
            return memo[ind1][ind2] = 1 + func(ind1-1, ind2-1, s1, s2);
        else
            return memo[ind1][ind2] = max(func(ind1-1, ind2, s1, s2), func(ind1, ind2-1, s1, s2));
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.length();
        int n = text2.length();
        
        memo = vector<vector<int>>(m+1, vector<int>(n+1, -1));
        
        return func(m-1, n-1, text1, text2);
    }
};




// Space optimisation
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.length();
        int n = text2.length();
        
        vector<int>prev(n+1, 0);
        vector<int>curr(n+1, 0);
        
        
        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                if(text1[i-1] == text2[j-1])
                    curr[j] = 1 + prev[j-1];
                else
                    curr[j] = max(prev[j], curr[j-1]);
            }
            
            prev = curr;
        }
        
        return prev[n];
    }
};