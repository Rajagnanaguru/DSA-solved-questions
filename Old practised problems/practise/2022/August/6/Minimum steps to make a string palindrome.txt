class Solution{
  public:
    int lcs(string a, string b){
        int n1 = a.length();
        int n2 = b.length();
        
        vector<int>prev(n2+1, 0);
        vector<int>curr(n2+1, 0);
        
        for(int i=1; i<=n1; i++){
            for(int j=1; j<=n2; j++){
                if(a[i-1] == b[j-1])
                    curr[j] = 1 + prev[j-1];
                else
                    curr[j] = max(curr[j-1], prev[j]);
            }
            prev = curr;
        }
        
        return prev[n2];
    }
    
    int longestPalindromicSubsequence(string s){
        string rev = s;
        reverse(rev.begin(), rev.end());
        
        return lcs(s, rev);
    }
    
    int countMin(string str){
    //complete the function here
    
    int n = str.length();
    return n - longestPalindromicSubsequence(str);
    }
};





// short





class Solution {
public:
    int lcs(string a, string b){
        int n1 = a.length();
        int n2 = b.length();
        
        vector<int>prev(n2+1, 0);
        vector<int>curr(n2+1, 0);
        
        for(int i=1; i<=n1; i++){
            for(int j=1; j<=n2; j++){
                if(a[i-1] == b[j-1])
                    curr[j] = 1 + prev[j-1];
                else
                    curr[j] = max(curr[j-1], prev[j]);
            }
            prev = curr;
        }
        
        return prev[n2];
    }
    
    int minInsertions(string s) {
        int n = s.length();
        
        string rev = s;
        reverse(rev.begin(), rev.end());
        
        return n - lcs(s, rev);
    }
};
