class Solution{
  public:
  
    vector<vector<int>>memo;
    
    int func(int i, int len, int price[]){
        if(i == 0)
            return len*price[0];
        
        if(memo[i][len] != -1)
            return memo[i][len];
            
        int nottake = func(i-1, len, price);
        
        int take = 0;
        
        int residue = len - (i+1);
        if(residue >= 0)
            take = price[i] + func(i, residue, price);
            
        return memo[i][len] = max(nottake, take);
    }
    
    int cutRod(int price[], int n) {
        //code here
        memo = vector<vector<int>>(n+1, vector<int>(n+1, -1));
        return func(n-1, n, price);
    }
};






// Space optimization


class Solution{
  public:
    
    int cutRod(int price[], int n) {
        //code here
        vector<int>prev(n+1, 0);
        
        for(int j=0; j<=n; j++)
            prev[j] = j*price[0];
        
        for(int i=1; i<n; i++){
            for(int j=0; j<=n; j++){
                int nottake = prev[j];
                int take = 0;
                int residue = j - (i+1);
                
                if(residue >= 0)
                    take = price[i] + prev[residue];
                    
                prev[j] = max(nottake, take);
            }
        }
        
        return prev[n];
    }
};