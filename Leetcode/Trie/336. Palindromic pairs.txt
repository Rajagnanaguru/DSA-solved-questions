class Solution {
public:
    
    struct Node {
        struct Node *links[26];
        bool flag = false;
        int index = -1;
        
        bool isThere(char c){
            int val = c - 'a';
            
            if(links[val] != NULL)
                return true;
            return false;
        }
    };
    
    Node *root;

    void insert(string s, int i){
        int n = s.length();
        
        Node *tmp = root;
        
        for(int i=0; i<n; i++){
            if(!tmp->isThere(s[i])){
                Node *t = new Node();
                tmp->links[s[i]-'a'] = t;
            }
            
            tmp = tmp->links[s[i] - 'a'];
        }
        
        tmp->flag = true;
        tmp->index = i;
    }
    
    void dfs(Node *node, vector<int>&res){
        Node *t = node;
        
        if(t->flag == true)
            res.push_back(t->index);
        
        for(int i=0; i<26; i++){
            if(t->links[i] != NULL)
                dfs(t->links[i], res);
        }
    }
    
    vector<int>search(string s){
        int n = s.length();
        
        Node *tmp = root;
        vector<int> res;
        
        for(int i=0; i<n; i++){
            if(tmp->flag == true)
                res.push_back(tmp->index);
            
            if(!tmp->isThere(s[i]))
                return res;
            
            tmp = tmp->links[s[i] - 'a'];
        }
           
        // doing a dfs to find other nodes
        dfs(tmp, res);
        
        return res;
    }
    
    bool isPalin(string a, string b){
        string res = a + b;
        int l = 0;
        int r = res.size() - 1;
        
        while(l < r){
            if(res[l++] != res[r--])
                return false;
        }
        
        return true;
    }
    
    vector<vector<int>> palindromePairs(vector<string>& words) {
        int n = words.size();
        vector<vector<int>>res;
        
        root = new Node();
        
        for(int i=0; i<n; i++){
            string t = words[i];
            reverse(t.begin(), t.end());
            
            insert(t, i);
        }
        
        for(int i=0; i<n; i++){
            vector<int>t = search(words[i]);
            
            for(auto &val: t){
                if(val != i){
                    if(isPalin(words[i], words[val]))
                        res.push_back({i, val});
                }
            }
        }
        
        return res;
    }
};