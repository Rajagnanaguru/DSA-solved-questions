class MyCircularQueue {
public:
    vector<int>q;
    int front, rear;
    int n;
    
    MyCircularQueue(int k) {
        q = vector<int>(k, 0);
        front = -1;
        rear = 0;
        n = k;
    }
    
    bool enQueue(int value) {
        if(isFull())
            return false;
        
        if(front == -1)
            front = rear;
        
        q[rear++] = value;

        if(rear == n)
            rear = 0;
        
        return true;
    }
    
    bool deQueue() {
        if(isEmpty())
            return false;
        
        front++;
        if(front == n)
            front = 0;
        
        if(front == rear)
            front = -1;
        
        return true;
    }
    
    int Front() {
        if(isEmpty())
            return -1;
        return q[front];
    }
    
    int Rear() {
        if(isEmpty())
            return -1;
        
        if(rear-1 == -1)
            return q[n-1];
        return q[rear-1];
    }
    
    bool isEmpty() {
        if(front == -1)
            return true;
        return false;
    }
    
    bool isFull() {
        if(front == rear)
            return true;
        return false;
    }
};
