// TC: O(n*n) => erase takes O(n) each time
// OC: O(n)

class Solution {
public:
    int conv(int ind, int n){
        return ind % n;    
    }
    
    int findTheWinner(int n, int k) {
        vector<int>arr(n, 0);
        for(int i=0; i<n; i++)
            arr[i] = i+1;
        
        int curr = 0;
        
        int add, del;
        
        while(n != 1){            
            add = (k-1) % n;
            del = curr + add;
            
            del = conv(del, n);
            
            arr.erase(arr.begin() + del);
            
            n -= 1;
            curr = conv(del, n);
        }
        
        return arr[0];
    }
};

// Recursive soln
// TC: O(n)
// SC: O(n)
class Solution {
public:
    int findTheWinner(int n, int k) {
        vector<int>dp(n+1, 0);
        
        dp[0] = 0;
        
        for(int i=1; i<=n; i++)
            dp[i] = ((k%i) + dp[i-1])%i;
        
        return dp[n] + 1;
    }
};