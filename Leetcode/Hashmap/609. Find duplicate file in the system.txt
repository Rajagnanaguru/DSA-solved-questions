class Solution {
public:
    map<string, vector<string>>group;
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        vector<vector<string>>res;
        
        int n = paths.size();
        
        for(int i=0; i<n; i++){
            string inp = paths[i];
            
            stringstream s(inp);
            
            string dir;
            string t;
            getline(s, dir, ' ');
            
            while(getline(s, t, ' ')){
                stringstream ss(t);
                
                string rem1;
                getline(ss, rem1, '(');
                
                string rem2;
                getline(ss, rem2, ')');
            
                string toadd = dir + "/" + rem1;
                
                
                group[rem2].push_back(toadd);
            }
        }
        
        for(auto &val: group){
            if(val.second.size() > 1)
                res.push_back(val.second);
        }
        
        return res;
    }
};