// TC average case -> O(nlogn)
// worst case -> O(n^2)

class Solution {
public:
    int numberOfWeakCharacters(vector<vector<int>>& properties) {
        sort(properties.begin(), properties.end(), [](vector<int>&a, vector<int>&b){
            if(a[0] < b[0])
                return true;
            if(a[0] == b[0])
                return a[1] < b[1];
            
            return false;
        });
        
        int n = properties.size();
        
        vector<int>greaterind(n, 0);
        
        stack<int>st;
        
        for(int i=0; i<n; i++){
            if(st.empty())  
                st.push(i);
            else{
                int topind = st.top();
                if(properties[topind][1] > properties[i][1])
                    st.push(i);
                else{
                    while(!st.empty() && properties[st.top()][1] < properties[i][1]){
                        greaterind[st.top()] = i;
                        st.pop();
                    }
                    
                    st.push(i);
                }
            }
        }
        
        while(!st.empty()){
            greaterind[st.top()] = -1;
            st.pop();
        }
    
        int res = 0;
        
        for(int i=0; i<n; i++){
            int nextgreatind = greaterind[i];
            if(nextgreatind == -1)
                continue;
            else{
                if(properties[i][0] == properties[nextgreatind][0]){
                    
                    for(int j = nextgreatind+1; j<n; j++){
                        if(properties[i][0] < properties[j][0]
                          && properties[i][1] < properties[j][1]){
                            res++;
                            break;
                        }
                    }
                }else
                    res++;
            }
        }
        
        return res;
    }
};


// TC -> O(n)
class Solution {
public:
    int numberOfWeakCharacters(vector<vector<int>>& properties) {
        sort(properties.begin(), properties.end(), [](vector<int>&a, vector<int>&b){
            if(a[0] < b[0])
                return true;
            if(a[0] == b[0])
                return a[1] > b[1]; // handling the same attack case here itself
            
            return false;
        });
        
        int n = properties.size();
        
        int maxdefense = INT_MIN;
        
        int res = 0;
        
        for(int i=n-1; i>=0; i--){
            if(properties[i][1] < maxdefense)
                res++;
            
            maxdefense = max(maxdefense, properties[i][1]);
        }
        
        return res;
    }
};